<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <style>
      .links line {
        stroke: black;
        stroke-opacity: 1;
        stroke-width: 1px;
      }

      .nodes circle {
        stroke: black;
        stroke-opacity: 1;
        stroke-width: 1px;
      }

      .nodes text {
        font-family: monospace, sans-serif;
        font-size: 12px;
        user-select: none;
      }
    </style>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <title>Proofy</title>
  </head>
  <body>
    <script>
      function dragstart(d) {
        d3.event.sourceEvent.stopPropagation();
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
      }

      function dragmove(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
      }

      function dragend(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
      }

      function ticked() {
        node.call(updateNode);
        link.call(updateLink);
      }

      function updateLink(link) {
        link
          .attr("x1", function (d) {
            return d.source.x;
          })
          .attr("y1", function (d) {
            return d.source.y;
          })
          .attr("x2", function (d) {
            return d.target.x;
          })
          .attr("y2", function (d) {
            return d.target.y;
          });
      }

      function updateNode(node) {
        node.attr("transform", function (d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      }

      var width = $width;
      var height = $height;
      var radius = 50;
      var graph = JSON.parse($graph);

      var svg = d3
        .select("body")
        .append("svg:svg")
        .attr("width", width)
        .attr("height", height);

      svg
        .append("defs")
        .append("marker")
        .attr("id", "arrow")
        .attr("viewBox", "0 0 10 10")
        .attr("refX", radius + 10)
        .attr("refY", 5)
        .attr("markerWidth", 10)
        .attr("markerHeight", 10)
        .attr("orient", "auto")
        .append("path")
        .attr("d", "M 0 0 L 10 5 L 0 10 z")
        .attr("fill", "black");

      var collisionForce = d3.forceCollide(radius);
      var simulation = d3
        .forceSimulation()
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force(
          "link",
          d3.forceLink().id(function (d) {
            return d.id;
          })
        )
        .force("collision", d3.forceCollide());
      simulation.nodes(graph.nodes).on("tick", ticked);
      simulation.force("link").links(graph.links);
      simulation.force("collision").radius(radius);

      var links = svg
        .append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(graph.links);
      var link = links.enter().append("line").attr("marker-end", "url(#arrow)");

      var nodes = svg
        .append("g")
        .attr("class", "nodes")
        .selectAll("g")
        .data(graph.nodes);
      var node = nodes.enter().append("g");
      node.call(
        d3.drag().on("start", dragstart).on("drag", dragmove).on("end", dragend)
      );
      node
        .append("circle")
        .attr("r", radius)
        .attr("fill", "white")
        .attr("fill-opacity", "0.5");

      node
        .append("text")
        .text(function (d) {
          return d.id;
        })
        .attr("text-anchor", "middle");
    </script>
  </body>
</html>
